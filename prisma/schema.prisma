generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Movie {
  id              Int              @id @default(autoincrement())
  imDbID          String
  rank            String
  title           String
  fullTitle       String
  year            String
  image           String
  crew            String
  imDbRating      String
  imDbRatingCount String
  UserGroups      UserGroup[]      @relation(references: [id])
  UserGroupLikes  userGroupLikes[] @relation(references: [id])
}

model TVShow {
  id              Int              @id @default(autoincrement())
  imDbID          String
  rank            String
  title           String
  fullTitle       String
  year            String
  image           String
  crew            String
  imDbRating      String
  imDbRatingCount String
  UserGroups      UserGroup[]      @relation(references: [id])
  UserGroupLikes  userGroupLikes[] @relation(references: [id])
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userGroups    UserGroup[]      @relation(references: [id])
  userLikes          userGroupLikes[]
  newUser       Boolean @default(true)
  @@map(name: "users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserGroup {
  id             Int              @id @default(autoincrement())
  movies         Movie[]          @relation(references: [id])
  tvShows        TVShow[]         @relation(references: [id])
  users          User[]           @relation(references: [id])
  userGroupLikes userGroupLikes[]
}

model userGroupLikes {
  id          Int       @id @default(autoincrement())
  userID      String
  user        User      @relation(fields: [userID], references: [id])
  userGroupID Int
  userGroup   UserGroup @relation(fields: [userGroupID], references: [id])
  movies      Movie[]   @relation(references: [id])
  tvShows     TVShow[]  @relation(references: [id])
}
