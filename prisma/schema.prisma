generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Show {
  id             Int              @id @default(autoincrement())
  original_title String?
  UserGroups     UserGroup[]      @relation(references: [id])
  UserGroupLikes userGroupLikes[] @relation(references: [id])
}

model User {
  id             String           @id @default(cuid())
  userName       String?          @unique
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  userGroups     UserGroup[]      @relation(references: [id], name: "groupMembers")
  userLikes      userGroupLikes[]
  friends        User[]           @relation("UserFriends")
  newUser        Boolean          @default(true)
  preferedGenres Genre[]
  activeGroup    UserGroup?       @relation(name: "groupOwner", references: [id], fields: [userGroupId])

  userId String?

  recievedFriendRequests FriendRequests[]    @relation("friendRequestRecipient")
  sentFriendRequests     FriendRequests[]    @relation("friendRequestSender")
  recievedGroupRequests  UserGroupRequests[] @relation("groupRequestRecipient")
  sentGroupRequests      UserGroupRequests[] @relation("groupRequestSender")
  UserGroup              UserGroup[]
  userGroupId            Int?
  User                   User[]              @relation("UserFriends", fields: [userId], references: [id])

  @@map(name: "users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserGroup {
  id             Int                 @id @default(autoincrement())
  name           String
  shows          Show[]              @relation(references: [id])
  users          User[]              @relation(references: [id], name: "groupMembers")
  userGroupLikes userGroupLikes[]
  groupOwners    User[]              @relation(references: [id])
  invites        UserGroupRequests[] @relation("invites")

  User    User[] @relation("groupOwner")
  genreId Int?
}

model userGroupLikes {
  id          Int       @id @default(autoincrement())
  userID      String
  user        User      @relation(fields: [userID], references: [id])
  userGroupID Int
  userGroup   UserGroup @relation(fields: [userGroupID], references: [id], onDelete: Cascade)
  shows       Show[]    @relation(references: [id])
  liked       Boolean
}

model Genre {
  id      Int    @id @default(autoincrement())
  genreID Int
  name    String
  User    User[]

}

model FriendRequests {
  id          Int      @id @default(autoincrement())
  sender      User     @relation(fields: [senderId], references: [id], name: "friendRequestRecipient")
  recipient   User     @relation(fields: [recipientId], references: [id], name: "friendRequestSender")
  accepted    Boolean?
  senderId    String
  recipientId String
  sentAt      DateTime @default(now())
}

model UserGroupRequests {
  id          Int       @id @default(autoincrement())
  sender      User      @relation(fields: [senderId], references: [id], name: "groupRequestRecipient")
  recipient   User      @relation(fields: [recipientId], references: [id], name: "groupRequestSender")
  userGroup   UserGroup @relation(fields: [userGroupId], references: [id], name: "invites", onDelete: Cascade)
  accepted    Boolean?
  senderId    String
  recipientId String
  userGroupId Int
  sentAt      DateTime  @default(now())
}
